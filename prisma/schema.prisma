generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int        @id @default(autoincrement())
  id_permission Int
  first_name    String     @db.VarChar(128)
  last_name     String     @db.VarChar(128)
  email         String     @unique @db.VarChar(256)
  phone_number  String?    @db.VarChar(16)
  password      String     @db.VarChar(128)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now()) @updatedAt
  deletedAt     DateTime?  @db.Timestamp
  permission    Permission @relation(fields: [id_permission], references: [id])
  orders        Order[]

  @@index([id_permission])
}

model Permission {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(128)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime? @db.Timestamp
  users     User[]
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  value       Float
  stock       Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  OrderInfo   OrderInfo[]

  @@map("Product")
}

model PaymentStatus {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(50)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime? @db.Timestamp
  orders    Order[]
}

model PaymentMethod {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(50)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime? @db.Timestamp
  orders    Order[]
}

model OrderInfo {
  id        Int     @id @default(autoincrement())
  productId Int
  orderId   Int
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id], name: "OrderToOrderInfo")

  @@map("Order_Info")
}

model Order {
  id              Int           @id @default(autoincrement())
  paymentMethodId Int
  paymentStatusId Int
  userId          Int
  description     String?
  date            DateTime      @default(now())
  value           Float
  report          Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
  deletedAt       DateTime?
  user            User          @relation(fields: [userId], references: [id])
  paymentStatus   PaymentStatus @relation(fields: [paymentStatusId], references: [id])
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  orderInfos      OrderInfo[]   @relation(name: "OrderToOrderInfo")
  orderStatus     OrderReport   @relation(fields: [report], references: [id])

  @@map("Order")
}

model OrderReport {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(50)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime? @db.Timestamp
  orders    Order[]
}
