import makeDatabaseUrl from './utils/make-databaseurl'

import express, { Request, Response } from "express"
// import { sequelize } from "./db/db.config"
import bodyParser from "body-parser"
import cors from "cors"
import morgan from "morgan"
import swaggerUi from "swagger-ui-express"
import swaggerJsdoc from "swagger-jsdoc"

// Importing Routers
import usersRouter from "./user/router/user.router"
import paymentStatusRouter from "./payment_status/router/paymentStatus.router"
import paymentMethodRouter from "./payment_method/router/paymentMethod.router"
import orderRouter from "./order/router/order.router"

makeDatabaseUrl()

const options = {
  definition: {
    openapi: "3.0.0",
    info: {
      title: "E-commerce API",
      version: "1.0.0",
      description: "Esta aplicaÃ§Ã£o Ã© um projeto de backend para um sistema de e-commerce, \
      desenvolvido como parte de uma avaliaÃ§Ã£o (N3) para um cenÃ¡rio fictÃ­cio onde os desenvo\
      lvedores trabalham para uma startup. \n\nO objetivo Ã© implementar uma API Rest que atenda \
      aos requisitos fornecidos pelo cliente, para posterior implantaÃ§Ã£o no servidor do cliente. O \
      projeto Ã© colaborativo, com tarefas divididas entre os membros da equipe, cada um \
      responsÃ¡vel por diferentes aspectos do sistema, incluindo modelos de dados como \
      User, Permissions, Product, Order, Payment_method, e Payment_status, alÃ©m de end\
      points para CRUD (Create, Read, Update, Delete) desses modelos e funcionalidades \
      especÃ­ficas como controle de acesso baseado em Permissions, integraÃ§Ã£o de mÃ©todos \
      de pagamento, e desenvolvimento de endpoints de relatÃ³rios.\n\nOs critÃ©rios de avaliaÃ§Ã£o \
      para o projeto incluem funcionalidade (todos os endpoints devem estar funcionando), \
      validaÃ§Ã£o (controle de exceÃ§Ã£o para erros 400 e validaÃ§Ã£o de campos obrigatÃ³rios), arquitetura \
      (uso das camadas de Routers, Controllers, Services, e Models, com persistÃªncia no banco de dados \
      relacional via Prisma), e qualidade do cÃ³digo (organizaÃ§Ã£o, otimizaÃ§Ã£o e documentaÃ§Ã£o).AlÃ©m disso, \
      o projeto tambÃ©m envolve a implementaÃ§Ã£o de Docker para desenvolvimento, supervisÃ£o e logging \
      de atividades nos endpoints, e a escrita de testes unitÃ¡rios para garantir a cobertura de testes para \
      todos os endpoints, configurando um ambiente de testes e integraÃ§Ã£o contÃ­nua.\n\nA divisÃ£o de tarefas \
      entre os integrantes da equipe Ã© detalhada, com responsabilidades especÃ­ficas atribuÃ­das a cada membro, \
      incluindo a implementaÃ§Ã£o de modelos e endpoints especÃ­ficos, desenvolvimento de testes unitÃ¡rios, e \
      supervisÃ£o geral dos endpoints.",
    },
  },
  apis: ["./src/**/*.router.ts"],
}
const specs = swaggerJsdoc(options)
const app = express()
const port = 3000

// oi
// bom dia princesa ğŸ˜˜

app.use(bodyParser.json())
app.use(bodyParser.urlencoded({ extended: true }))
app.use(cors())
app.use(morgan("dev"))
app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(specs))

///////////////////////////////////////////////////////////////////////////
//////////////////////////ROUTES//////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

//Users routes
app.use("/users", usersRouter)

//Payment status routes
app.use("/paymentstatus", paymentStatusRouter)

//Payment method routes
app.use("/paymentmethod", paymentMethodRouter)

//Order routes
app.use("/order", orderRouter)

// Rota inicial
app.get("/", (req: Request, res: Response) => {
  res.send("Welcome to Ecommerce API!")
})

// SincronizaÃ§Ã£o do Sequelize
// sequelize.sync()

// Iniciar o servidor
app.listen(port, () => {
  console.log(`ğŸš€ Server is running at http://localhost:${port} ğŸš€`)
})
